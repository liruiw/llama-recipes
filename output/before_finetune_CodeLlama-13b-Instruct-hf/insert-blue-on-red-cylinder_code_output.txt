[INST] <<SYS>>

<</SYS>>

Write the pybullet simulation task class [insert-blue-on-red-cylinder]. Provide answers in a python code block starting with ``` [/INST]  ```
import pybullet as p

class SimulationTask:
    def __init__(self, task_name, task_description, task_parameters):
        self.task_name = task_name
        self.task_description = task_description
        self.task_parameters = task_parameters

    def run_task(self):
        # Create a simulation environment
        p.connect(p.GUI)
        p.setAdditionalSearchPath(pybullet_data.getDataPath())
        p.loadURDF("plane.urdf")

        # Create a blue cylinder
        blue_cylinder_id = p.loadURDF("blue_cylinder.urdf")

        # Create a red cylinder
        red_cylinder_id = p.loadURDF("red_cylinder.urdf")

        # Set the initial position and orientation of the blue cylinder
        p.resetBasePositionAndOrientation(blue_cylinder_id, [0, 0, 0], [0, 0, 0, 1])

        # Set the initial position and orientation of the red cylinder
        p.resetBasePositionAndOrientation(red_cylinder_id, [0, 0, 0], [0, 0, 0, 1])

        # Run the simulation for 1000 steps
        for i in range(1000):
            # Step the simulation
            p.stepSimulation()

            # Get the position and orientation of the blue cylinder
            blue_cylinder_position, blue_cylinder_orientation = p.getBasePositionAndOrientation(blue_cylinder_id)

            # Get the position and orientation of the red cylinder
            red_cylinder_position, red_cylinder_orientation = p.getBasePositionAndOrientation(red_cylinder_id)

            # Check if the blue cylinder is on top of the red cylinder
            if blue_cylinder_position[2] > red_cylinder_position[2]:
                # If the blue cylinder is on top of the red cylinder, print a message
                print("Blue cylinder is on top of red cylinder")

        # Disconnect from the simulation
        p.disconnect()
```