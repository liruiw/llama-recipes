[INST] <<SYS>>

<</SYS>>

Write the pybullet simulation task class [align-rainbow-along-line]. Provide answers in a python code block starting with ``` [/INST]  ```
import pybullet as p

class SimulationTask:
    def __init__(self, task_name, task_description, task_parameters):
        self.task_name = task_name
        self.task_description = task_description
        self.task_parameters = task_parameters

    def run_task(self):
        # Set up the simulation
        p.connect(p.GUI)
        p.setAdditionalSearchPath(pybullet_data.getDataPath())
        p.loadURDF("plane.urdf")

        # Create the robot
        robot = p.loadURDF("robot.urdf")

        # Set the initial position and orientation of the robot
        robot_start_pos = [0, 0, 0]
        robot_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(robot, robot_start_pos, robot_start_orn)

        # Set the initial position and orientation of the target
        target_start_pos = [1, 0, 0]
        target_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(target, target_start_pos, target_start_orn)

        # Set the initial position and orientation of the obstacle
        obstacle_start_pos = [0.5, 0, 0]
        obstacle_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(obstacle, obstacle_start_pos, obstacle_start_orn)

        # Set the initial position and orientation of the rainbow
        rainbow_start_pos = [0, 0, 0]
        rainbow_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(rainbow, rainbow_start_pos, rainbow_start_orn)

        # Set the initial position and orientation of the line
        line_start_pos = [0, 0, 0]
        line_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(line, line_start_pos, line_start_orn)

        # Set the initial position and orientation of the arrow
        arrow_start_pos = [0, 0, 0]
        arrow_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(arrow, arrow_start_pos, arrow_start_orn)

        # Set the initial position and orientation of the text
        text_start_pos = [0, 0, 0]
        text_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(text, text_start_pos, text_start_orn)

        # Set the initial position and orientation of the button
        button_start_pos = [0, 0, 0]
        button_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(button, button_start_pos, button_start_orn)

        # Set the initial position and orientation of the checkbox
        checkbox_start_pos = [0, 0, 0]
        checkbox_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(checkbox, checkbox_start_pos, checkbox_start_orn)

        # Set the initial position and orientation of the radio button
        radio_button_start_pos = [0, 0, 0]
        radio_button_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(radio_button, radio_button_start_pos, radio_button_start_orn)

        # Set the initial position and orientation of the dropdown
        dropdown_start_pos = [0, 0, 0]
        dropdown_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(dropdown, dropdown_start_pos, dropdown_start_orn)

        # Set the initial position and orientation of the slider
        slider_start_pos = [0, 0, 0]
        slider_start_orn = p.getQuaternionFromEuler([0, 0, 0])
        p.resetBasePositionAndOrientation(slider, slider_start_pos, slider_start_orn)

        # Set the initial position and orientation of the