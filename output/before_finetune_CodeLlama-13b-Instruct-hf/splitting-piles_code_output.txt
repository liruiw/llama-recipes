[INST] <<SYS>>

<</SYS>>

Write the pybullet simulation task class [splitting-piles]. Provide answers in a python code block starting with ``` [/INST]  ```
import pybullet as p

class SplittingPilesTask(p.Task):
    def __init__(self, piles, target_pile_size):
        self.piles = piles
        self.target_pile_size = target_pile_size

    def step(self):
        # Check if any pile is larger than the target size
        for pile in self.piles:
            if len(pile) > self.target_pile_size:
                # Split the pile into two smaller piles
                pile1 = pile[:self.target_pile_size]
                pile2 = pile[self.target_pile_size:]
                self.piles.remove(pile)
                self.piles.append(pile1)
                self.piles.append(pile2)
                break

        # Check if any pile is smaller than the target size
        for pile in self.piles:
            if len(pile) < self.target_pile_size:
                # Merge the pile with the closest pile
                closest_pile = None
                min_distance = float('inf')
                for other_pile in self.piles:
                    if other_pile is not pile:
                        distance = len(other_pile) - len(pile)
                        if distance < min_distance:
                            min_distance = distance
                            closest_pile = other_pile
                if closest_pile is not None:
                    self.piles.remove(pile)
                    self.piles.remove(closest_pile)
                    self.piles.append(pile + closest_pile)
                    break

        # Check if all piles are the same size
        if all(len(pile) == self.target_pile_size for pile in self.piles):
            # All piles are the same size, so the task is complete
            return True
        else:
            # Not all piles are the same size, so the task is not complete
            return False
```