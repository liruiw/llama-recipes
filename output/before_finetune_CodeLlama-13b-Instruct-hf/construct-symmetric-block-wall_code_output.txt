[INST] <<SYS>>

<</SYS>>

Write the pybullet simulation task class [construct-symmetric-block-wall]. Provide answers in a python code block starting with ``` [/INST]  ```
class ConstructSymmetricBlockWallTask(pybullet.Task):
    def __init__(self, pybullet_client, block_size, wall_height, wall_width, wall_thickness):
        self.pybullet_client = pybullet_client
        self.block_size = block_size
        self.wall_height = wall_height
        self.wall_width = wall_width
        self.wall_thickness = wall_thickness

    def construct_symmetric_block_wall(self):
        # Create the wall
        wall_shape = self.pybullet_client.createCollisionShape(
            shapeType=pybullet.GEOM_BOX,
            halfExtents=[self.wall_width / 2, self.wall_height / 2, self.wall_thickness / 2]
        )
        wall_body = self.pybullet_client.createMultiBody(
            baseMass=0,
            baseCollisionShapeIndex=wall_shape,
            basePosition=[0, 0, self.wall_height / 2]
        )

        # Create the blocks
        block_shape = self.pybullet_client.createCollisionShape(
            shapeType=pybullet.GEOM_BOX,
            halfExtents=[self.block_size / 2, self.block_size / 2, self.block_size / 2]
        )
        block_body = self.pybullet_client.createMultiBody(
            baseMass=0,
            baseCollisionShapeIndex=block_shape,
            basePosition=[0, 0, self.block_size / 2]
        )

        # Construct the wall
        for i in range(self.wall_width // self.block_size):
            for j in range(self.wall_height // self.block_size):
                block_position = [
                    i * self.block_size,
                    j * self.block_size,
                    self.block_size / 2
                ]
                block_orientation = [0, 0, 0, 1]
                self.pybullet_client.createMultiBody(
                    baseMass=0,
                    baseCollisionShapeIndex=block_shape,
                    basePosition=block_position,
                    baseOrientation=block_orientation
                )

        # Add the wall and blocks to the simulation
        self.pybullet_client.addCollisionObject(wall_body, collisionGroup=1, collisionMask=1)
        self.pybullet_client.addCollisionObject(block_body, collisionGroup=1, collisionMask=1)

        # Set the gravity
        self.pybullet_client.setGravity(0, 0, -9.8)

        # Run the simulation
        for i in range(1000):
            self.pybullet_client.stepSimulation()
```