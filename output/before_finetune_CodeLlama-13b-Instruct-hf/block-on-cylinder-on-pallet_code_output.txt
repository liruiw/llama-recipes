[INST] <<SYS>>

<</SYS>>

Write the pybullet simulation task class [block-on-cylinder-on-pallet]. Provide answers in a python code block starting with ``` [/INST]  ```
import pybullet as p

class BlockOnCylinderOnPallet(p.Task):
    def __init__(self, block_mass, block_size, cylinder_mass, cylinder_radius, cylinder_height, pallet_mass, pallet_size):
        self.block_mass = block_mass
        self.block_size = block_size
        self.cylinder_mass = cylinder_mass
        self.cylinder_radius = cylinder_radius
        self.cylinder_height = cylinder_height
        self.pallet_mass = pallet_mass
        self.pallet_size = pallet_size

    def create_block(self):
        block_uid = p.create_body(mass=self.block_mass, shape=p.BOX, size=self.block_size)
        return block_uid

    def create_cylinder(self):
        cylinder_uid = p.create_body(mass=self.cylinder_mass, shape=p.CYLINDER, radius=self.cylinder_radius, height=self.cylinder_height)
        return cylinder_uid

    def create_pallet(self):
        pallet_uid = p.create_body(mass=self.pallet_mass, shape=p.BOX, size=self.pallet_size)
        return pallet_uid

    def create_scene(self):
        block_uid = self.create_block()
        cylinder_uid = self.create_cylinder()
        pallet_uid = self.create_pallet()
        p.create_constraint(block_uid, cylinder_uid, p.JOINT_FIXED, [0, 0, 0], [0, 0, 0])
        p.create_constraint(cylinder_uid, pallet_uid, p.JOINT_FIXED, [0, 0, 0], [0, 0, 0])
        return block_uid, cylinder_uid, pallet_uid

    def simulate(self, time_step, num_steps):
        block_uid, cylinder_uid, pallet_uid = self.create_scene()
        for i in range(num_steps):
            p.stepSimulation()
            time.sleep(time_step)
        return block_uid, cylinder_uid, pallet_uid
```